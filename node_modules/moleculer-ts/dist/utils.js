"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prettier_1 = __importDefault(require("prettier"));
const fs_1 = __importDefault(require("fs"));
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const child_process_1 = __importDefault(require("child_process"));
const mustache_1 = __importDefault(require("mustache"));
const capitalize = (s) => {
    if (typeof s !== 'string') {
        return '';
    }
    return s.charAt(0).toUpperCase() + s.slice(1);
};
const servicesTemplate = fs_1.default.readFileSync(path_1.default.join(__dirname, 'templates', 'services.ts.mustache'), 'utf-8');
const brokerTemplate = fs_1.default.readFileSync(path_1.default.join(__dirname, 'templates', 'broker.ts.mustache'), 'utf-8');
const actionsParamsAssertTemplate = fs_1.default.readFileSync(path_1.default.join(__dirname, 'templates', 'actions.params.assert.ts.mustache'), 'utf-8');
const eventsParamsAssertTemplate = fs_1.default.readFileSync(path_1.default.join(__dirname, 'templates', 'events.params.assert.ts.mustache'), 'utf-8');
const rawMetaTemplate = fs_1.default.readFileSync(path_1.default.join(__dirname, 'templates/meta', 'raw.ts.mustache'), 'utf-8');
const namesMetaTemplate = fs_1.default.readFileSync(path_1.default.join(__dirname, 'templates/meta', 'names.ts.mustache'), 'utf-8');
async function formatAndSave(input, destination) {
    const info = await prettier_1.default.getFileInfo(destination);
    const options = (await prettier_1.default.resolveConfig(destination)) || undefined;
    if (options) {
        options.parser = info.inferredParser;
    }
    const output = prettier_1.default.format(input, options);
    await new Promise((resolve, reject) => {
        fs_1.default.mkdir(path_1.default.dirname(destination), { recursive: true }, err => {
            if (err) {
                reject(err);
                return;
            }
            resolve();
        });
    });
    await new Promise((resolve, reject) => {
        fs_1.default.writeFile(destination, output, err => {
            if (err) {
                reject(err);
                return;
            }
            resolve();
        });
    });
}
function getServiceTypeName(name) {
    const pureName = name
        .replace(/[^a-zA-Z0-9][a-zA-Z0-9]/g, one => one.charAt(0) + one.charAt(1).toUpperCase())
        .replace(/[^a-zA-Z0-9]/g, '');
    return `${capitalize(pureName)}ServiceTypes`;
}
function getRelativePathForImport(from, to) {
    return path_1.default.posix
        .relative(path_1.default.posix.normalize(from), path_1.default.posix.normalize(to))
        .replace(/\.ts$/, '');
}
async function rawMetaNames(services, outputDirImport) {
    // service types meta file content
    const metaFileContent = mustache_1.default.render(rawMetaTemplate, {
        serviceNames: services.map(({ name }) => getServiceTypeName(name)),
        outputDirImport,
    });
    const cpMeta = child_process_1.default.spawn(`${path_1.default.join('node_modules', '.bin', 'ts-node')}`, [
        '-e',
        metaFileContent,
    ]);
    let rawMeta = '';
    cpMeta.stdout.on('data', data => {
        rawMeta += data;
    });
    cpMeta.stderr.on('data', data => {
        console.error(`stderr: ${data}`);
    });
    await new Promise(resolve => {
        cpMeta.on('close', code => {
            resolve();
        });
    });
    const meta = JSON.parse(rawMeta);
    // broker action names
    const names = [];
    services.forEach(svc => {
        const { actionsLength, eventsLength } = meta[getServiceTypeName(svc.name)];
        names.push({
            name: getServiceTypeName(svc.name),
            actions: Array.from(Array(actionsLength).keys()),
            events: Array.from(Array(eventsLength).keys()),
        });
    });
    const metaNamesFileContent = mustache_1.default.render(namesMetaTemplate, {
        outputDirImport,
        names,
    });
    const cpMetaNames = child_process_1.default.spawn(`${path_1.default.join('node_modules', '.bin', 'ts-node')}`, ['-e', metaNamesFileContent]);
    let rawMetaNames = '';
    cpMetaNames.stdout.on('data', data => {
        rawMetaNames += data;
    });
    cpMetaNames.stderr.on('data', data => {
        console.error(`stderr: ${data}`);
    });
    await new Promise(resolve => {
        cpMetaNames.on('close', code => {
            resolve();
        });
    });
    return {
        meta,
        rawMetaNames: JSON.parse(rawMetaNames),
    };
}
async function generateBroker(options) {
    const isServiceName = options.isServiceName ||
        function (name) {
            return !Boolean(name.match(/^\$/));
        };
    const outputDirFs = path_1.default.normalize(options.outputDir);
    const outputDirImport = path_1.default.posix.normalize(options.outputDir);
    const serviceTypeFiles = glob_1.default.sync(options.serviceTypesPattern);
    const services = [];
    // init
    serviceTypeFiles.forEach(file => {
        const serviceRelativePath = getRelativePathForImport(options.outputDir, file);
        const service = require(file);
        const name = service.name;
        services.push({
            name,
            path: serviceRelativePath,
        });
    });
    // service types file content
    const serviceTypesFileContent = mustache_1.default.render(servicesTemplate, {
        services: services.map(({ path, name }) => {
            return {
                path,
                name: getServiceTypeName(name),
            };
        }),
    });
    await formatAndSave(serviceTypesFileContent, path_1.default.join(options.outputDir, 'services.types.ts'));
    const { meta, rawMetaNames: metaNames } = await rawMetaNames(services, outputDirImport);
    const callObj = {};
    const emitObj = {};
    // call
    services.forEach(svc => {
        const { actionsLength, eventsLength } = meta[getServiceTypeName(svc.name)];
        // actions GetCallParams/GetCallReturn
        for (let index = 0; index < actionsLength; index++) {
            const actionName = `${metaNames[`Services${getServiceTypeName(svc.name)}ActionsName${index}`]}`;
            const name = `${svc.name}.${actionName}`;
            if (callObj[name] !== undefined) {
                throw new Error(`Action ${name} multiple type definition detected.`);
            }
            callObj[name] = {
                actionName,
                name,
                index,
                type: getServiceTypeName(svc.name),
            };
        }
        // events GetEmitParams
        for (let index = 0; index < eventsLength; index++) {
            const eventName = `${metaNames[`Services${getServiceTypeName(svc.name)}EventsName${index}`]}`;
            const name = `${svc.name}.${eventName}`;
            if (emitObj[name] !== undefined) {
                throw new Error(`Event ${name} multiple type definition detected.`);
            }
            emitObj[name] = {
                eventName,
                name,
                index,
                type: getServiceTypeName(svc.name),
            };
        }
    });
    const brokerTypesFileContent = mustache_1.default.render(brokerTemplate, {
        callObj: Object.values(callObj),
        emitObj: Object.values(emitObj),
        ServiceNames: services
            .filter(({ name }) => isServiceName(name))
            .map(({ name }) => name),
        ServiceActionNames: Object.keys(callObj),
        ServiceEventNames: Object.keys(emitObj),
    });
    await formatAndSave(brokerTypesFileContent, path_1.default.join(outputDirFs, 'broker.types.ts'));
    if (options.generateActionsParamsAssert) {
        const servicesParamsAssertFileContent = mustache_1.default.render(actionsParamsAssertTemplate, {
            callObj: Object.values(callObj),
        });
        await formatAndSave(servicesParamsAssertFileContent, path_1.default.join(outputDirFs, 'actions.params.assert.ts'));
    }
    if (options.generateEventsParamsAssert) {
        const eventsParamsAssertFileContent = mustache_1.default.render(eventsParamsAssertTemplate, {
            emitObj: Object.values(emitObj),
        });
        await formatAndSave(eventsParamsAssertFileContent, path_1.default.join(outputDirFs, 'events.params.assert.ts'));
    }
}
exports.generateBroker = generateBroker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3REFBZ0M7QUFDaEMsNENBQW9CO0FBQ3BCLGdEQUF3QjtBQUN4QixnREFBd0I7QUFDeEIsa0VBQStCO0FBQy9CLHdEQUFnQztBQWVoQyxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFO0lBQy9CLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ3pCLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFDRCxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUM7QUFFRixNQUFNLGdCQUFnQixHQUFHLFlBQUUsQ0FBQyxZQUFZLENBQ3RDLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxzQkFBc0IsQ0FBQyxFQUN6RCxPQUFPLENBQ1IsQ0FBQztBQUVGLE1BQU0sY0FBYyxHQUFHLFlBQUUsQ0FBQyxZQUFZLENBQ3BDLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxvQkFBb0IsQ0FBQyxFQUN2RCxPQUFPLENBQ1IsQ0FBQztBQUVGLE1BQU0sMkJBQTJCLEdBQUcsWUFBRSxDQUFDLFlBQVksQ0FDakQsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLG1DQUFtQyxDQUFDLEVBQ3RFLE9BQU8sQ0FDUixDQUFDO0FBRUYsTUFBTSwwQkFBMEIsR0FBRyxZQUFFLENBQUMsWUFBWSxDQUNoRCxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsa0NBQWtDLENBQUMsRUFDckUsT0FBTyxDQUNSLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBRyxZQUFFLENBQUMsWUFBWSxDQUNyQyxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsQ0FBQyxFQUN6RCxPQUFPLENBQ1IsQ0FBQztBQUNGLE1BQU0saUJBQWlCLEdBQUcsWUFBRSxDQUFDLFlBQVksQ0FDdkMsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsbUJBQW1CLENBQUMsRUFDM0QsT0FBTyxDQUNSLENBQUM7QUFFRixLQUFLLFVBQVUsYUFBYSxDQUFDLEtBQWEsRUFBRSxXQUFtQjtJQUM3RCxNQUFNLElBQUksR0FBRyxNQUFNLGtCQUFRLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRXJELE1BQU0sT0FBTyxHQUFHLENBQUMsTUFBTSxrQkFBUSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQztJQUN6RSxJQUFJLE9BQU8sRUFBRTtRQUNYLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQTRDLENBQUM7S0FDcEU7SUFFRCxNQUFNLE1BQU0sR0FBRyxrQkFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0MsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNwQyxZQUFFLENBQUMsS0FBSyxDQUFDLGNBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDN0QsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNaLE9BQU87YUFDUjtZQUNELE9BQU8sRUFBRSxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDcEMsWUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ3RDLElBQUksR0FBRyxFQUFFO2dCQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDWixPQUFPO2FBQ1I7WUFDRCxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxJQUFZO0lBQ3RDLE1BQU0sUUFBUSxHQUFHLElBQUk7U0FDbEIsT0FBTyxDQUNOLDBCQUEwQixFQUMxQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FDbkQ7U0FDQSxPQUFPLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLE9BQU8sR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztBQUMvQyxDQUFDO0FBRUQsU0FBUyx3QkFBd0IsQ0FBQyxJQUFZLEVBQUUsRUFBVTtJQUN4RCxPQUFPLGNBQUksQ0FBQyxLQUFLO1NBQ2QsUUFBUSxDQUFDLGNBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLGNBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzlELE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUVELEtBQUssVUFBVSxZQUFZLENBQUMsUUFBbUIsRUFBRSxlQUF1QjtJQUN0RSxrQ0FBa0M7SUFDbEMsTUFBTSxlQUFlLEdBQUcsa0JBQVEsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFO1FBQ3ZELFlBQVksRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEUsZUFBZTtLQUNoQixDQUFDLENBQUM7SUFFSCxNQUFNLE1BQU0sR0FBRyx1QkFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsRUFBRSxFQUFFO1FBQ3pFLElBQUk7UUFDSixlQUFlO0tBQ2hCLENBQUMsQ0FBQztJQUVILElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUVqQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7UUFDOUIsT0FBTyxJQUFJLElBQUksQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRTtRQUM5QixPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDMUIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDeEIsT0FBTyxFQUFFLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVqQyxzQkFBc0I7SUFDdEIsTUFBTSxLQUFLLEdBQVUsRUFBRSxDQUFDO0lBRXhCLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDckIsTUFBTSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFM0UsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNULElBQUksRUFBRSxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ2xDLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNoRCxNQUFNLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDL0MsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLG9CQUFvQixHQUFHLGtCQUFRLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFO1FBQzlELGVBQWU7UUFDZixLQUFLO0tBQ04sQ0FBQyxDQUFDO0lBRUgsTUFBTSxXQUFXLEdBQUcsdUJBQUUsQ0FBQyxLQUFLLENBQzFCLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQ2pELENBQUMsSUFBSSxFQUFFLG9CQUFvQixDQUFDLENBQzdCLENBQUM7SUFFRixJQUFJLFlBQVksR0FBRyxFQUFFLENBQUM7SUFFdEIsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFO1FBQ25DLFlBQVksSUFBSSxJQUFJLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7UUFDbkMsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQzFCLFdBQVcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQzdCLE9BQU8sRUFBRSxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU87UUFDTCxJQUFJO1FBQ0osWUFBWSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDO0tBQ3ZDLENBQUM7QUFDSixDQUFDO0FBRU0sS0FBSyxVQUFVLGNBQWMsQ0FBQyxPQUE4QjtJQUNqRSxNQUFNLGFBQWEsR0FDakIsT0FBTyxDQUFDLGFBQWE7UUFDckIsVUFBUyxJQUFZO1lBQ25CLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQztJQUVKLE1BQU0sV0FBVyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sZUFBZSxHQUFHLGNBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUVoRSxNQUFNLGdCQUFnQixHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFFaEUsTUFBTSxRQUFRLEdBQWMsRUFBRSxDQUFDO0lBRS9CLE9BQU87SUFDUCxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDOUIsTUFBTSxtQkFBbUIsR0FBRyx3QkFBd0IsQ0FDbEQsT0FBTyxDQUFDLFNBQVMsRUFDakIsSUFBSSxDQUNMLENBQUM7UUFFRixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUUxQixRQUFRLENBQUMsSUFBSSxDQUFDO1lBQ1osSUFBSTtZQUNKLElBQUksRUFBRSxtQkFBbUI7U0FDMUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCw2QkFBNkI7SUFDN0IsTUFBTSx1QkFBdUIsR0FBRyxrQkFBUSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtRQUNoRSxRQUFRLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7WUFDeEMsT0FBTztnQkFDTCxJQUFJO2dCQUNKLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7YUFDL0IsQ0FBQztRQUNKLENBQUMsQ0FBQztLQUNILENBQUMsQ0FBQztJQUVILE1BQU0sYUFBYSxDQUNqQix1QkFBdUIsRUFDdkIsY0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLG1CQUFtQixDQUFDLENBQ2xELENBQUM7SUFFRixNQUFNLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLFlBQVksQ0FDMUQsUUFBUSxFQUNSLGVBQWUsQ0FDaEIsQ0FBQztJQUVGLE1BQU0sT0FBTyxHQU9ULEVBQUUsQ0FBQztJQUNQLE1BQU0sT0FBTyxHQU9ULEVBQUUsQ0FBQztJQUVQLE9BQU87SUFDUCxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3JCLE1BQU0sRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRTNFLHNDQUFzQztRQUN0QyxLQUFLLElBQUksS0FBSyxHQUFXLENBQUMsRUFBRSxLQUFLLEdBQUcsYUFBYSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzFELE1BQU0sVUFBVSxHQUFHLEdBQ2pCLFNBQVMsQ0FBQyxXQUFXLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxLQUFLLEVBQUUsQ0FDeEUsRUFBRSxDQUFDO1lBQ0gsTUFBTSxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBRXpDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtnQkFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLElBQUkscUNBQXFDLENBQUMsQ0FBQzthQUN0RTtZQUVELE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRztnQkFDZCxVQUFVO2dCQUNWLElBQUk7Z0JBQ0osS0FBSztnQkFDTCxJQUFJLEVBQUUsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQzthQUNuQyxDQUFDO1NBQ0g7UUFFRCx1QkFBdUI7UUFDdkIsS0FBSyxJQUFJLEtBQUssR0FBVyxDQUFDLEVBQUUsS0FBSyxHQUFHLFlBQVksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN6RCxNQUFNLFNBQVMsR0FBRyxHQUNoQixTQUFTLENBQUMsV0FBVyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsS0FBSyxFQUFFLENBQ3ZFLEVBQUUsQ0FBQztZQUNILE1BQU0sSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUV4QyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsU0FBUyxJQUFJLHFDQUFxQyxDQUFDLENBQUM7YUFDckU7WUFFRCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUc7Z0JBQ2QsU0FBUztnQkFDVCxJQUFJO2dCQUNKLEtBQUs7Z0JBQ0wsSUFBSSxFQUFFLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7YUFDbkMsQ0FBQztTQUNIO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLHNCQUFzQixHQUFHLGtCQUFRLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRTtRQUM3RCxPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDL0IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQy9CLFlBQVksRUFBRSxRQUFRO2FBQ25CLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN6QyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDMUIsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDeEMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7S0FDeEMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxhQUFhLENBQ2pCLHNCQUFzQixFQUN0QixjQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQyxDQUMxQyxDQUFDO0lBRUYsSUFBSSxPQUFPLENBQUMsMkJBQTJCLEVBQUU7UUFDdkMsTUFBTSwrQkFBK0IsR0FBRyxrQkFBUSxDQUFDLE1BQU0sQ0FDckQsMkJBQTJCLEVBQzNCO1lBQ0UsT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1NBQ2hDLENBQ0YsQ0FBQztRQUVGLE1BQU0sYUFBYSxDQUNqQiwrQkFBK0IsRUFDL0IsY0FBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsMEJBQTBCLENBQUMsQ0FDbkQsQ0FBQztLQUNIO0lBRUQsSUFBSSxPQUFPLENBQUMsMEJBQTBCLEVBQUU7UUFDdEMsTUFBTSw2QkFBNkIsR0FBRyxrQkFBUSxDQUFDLE1BQU0sQ0FDbkQsMEJBQTBCLEVBQzFCO1lBQ0UsT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1NBQ2hDLENBQ0YsQ0FBQztRQUVGLE1BQU0sYUFBYSxDQUNqQiw2QkFBNkIsRUFDN0IsY0FBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUseUJBQXlCLENBQUMsQ0FDbEQsQ0FBQztLQUNIO0FBQ0gsQ0FBQztBQXhKRCx3Q0F3SkMifQ==